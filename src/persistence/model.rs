// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use crate::persistence::schema::{posts,users};
use async_graphql::{Enum, InputObject, SimpleObject};
use diesel::{Queryable,Insertable,AsChangeset,Selectable,AsExpression,FromSqlRow};
use chrono::DateTime;
use chrono::offset::Utc;
use chrono::serde::ts_milliseconds;
use serde::{Serialize,Deserialize};
use serde::Serializer;
use serde_with;

pub fn serialize_dt<S>(dt: &Option<DateTime<Utc>>, serializer: S) -> Result<S::Ok, S::Error>
where
    S: Serializer,
{
    if let Some(dt) = dt {
        dt.timestamp_millis().serialize(serializer)
    } else {
        serializer.serialize_none()
    }
}

#[derive(Queryable, SimpleObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=users)]
pub struct User {
    pub id: i32,
    pub username: String,
    pub display_name: Option<String>,
    pub about_me: Option<String>,
    pub description: Option<String>,
    pub avatar: Option<String>,
}

#[derive(Insertable, InputObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=users)]
pub struct CreateUser {
  pub username: String,
  pub display_name: Option<String>,
  pub about_me: Option<String>,
  pub description: Option<String>,
  pub avatar: Option<String>
}

#[derive(AsChangeset, InputObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=users)]
pub struct UpdateUser {
  pub display_name: Option<String>,
  pub about_me: Option<String>,
  pub description: Option<String>,
  pub avatar: Option<String>
}

// #[derive(AsExpression, FromSqlRow, Enum, PartialEq, Eq, Copy, Debug, Clone, Serialize, Deserialize)]
// #[sql_type = "diesel::sql_types::VarChar"]
// pub enum Status {
//   DRAFT,
//   PUBLISHED,
//   DELETED,
// }

#[derive(Queryable, SimpleObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=posts)]
pub struct Post {
    pub id: i32,
    pub author: i32,
    pub blocks: Option<String>,
    #[serde(serialize_with = "serialize_dt")]
    pub created_at: Option<DateTime<Utc>>,
    #[serde(serialize_with = "serialize_dt")]
    pub updated_at: Option<DateTime<Utc>>,
    pub status: String,
}

#[derive(Insertable, InputObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=posts)]
pub struct CreatePost {
  pub author: i32,
  pub blocks: Option<String>,
  pub status: String,
}

#[derive(AsChangeset, InputObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=posts)]
pub struct UpdatePost {
  pub blocks: Option<String>,
  pub status: String,
}

#[derive(AsChangeset, InputObject, Debug, Clone, Serialize, Deserialize)]
#[diesel(table_name=posts)]
pub struct DeletePost {
  pub status: String,
}